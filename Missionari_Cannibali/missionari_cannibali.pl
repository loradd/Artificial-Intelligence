% to run the code in SWI-Prolog, do
%        ?- ['missionari_cannibali.pl'].
%        ?- find.

% Rappresentazione state: [CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,B,CANNIBALI_DESTRA,MISSIONARI_DESTRA]
start([3,3,sinistra,0,0]).
goal([0,0,destra,3,3]).

legal(CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,CANNIBALI_DESTRA,MISSIONARI_DESTRA) :-
	% stato legale?
	MISSIONARI_SINISTRA>=0, CANNIBALI_SINISTRA>=0, MISSIONARI_DESTRA>=0, CANNIBALI_DESTRA>=0,
	(MISSIONARI_SINISTRA>=CANNIBALI_SINISTRA ; MISSIONARI_SINISTRA=0),
	(MISSIONARI_DESTRA>=CANNIBALI_DESTRA ; MISSIONARI_DESTRA=0).

% Mosse possibili:
move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2]):-
	% Due missionari da sinistra verso destra.
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA+2,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA-2,
	legal(CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA]):-
	% Due cannibali da sinistra a destra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA+2,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA-2,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,destra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2]):-
	%  Un missionario ed un cannibale da sinistra verso destra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA+1,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA-1,
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA+1,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA-1,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2]):-
	% Un missionario da sinistra verso destra.
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA+1,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA-1,
	legal(CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA]):-
	% Un cannibale da sinistra verso destra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA+1,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA-1,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2]):-
	% Due missionari da destra verso sinistra.
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA-2,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA+2,
	legal(CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA]):-
	% Due cannibali da destra verso sinistra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA-2,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA+2,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,sinistra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2]):-
	%  Un missionario ed un cannibale da destra verso sinistra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA-1,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA+1,
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA-1,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA+1,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,sinistra,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2]):-
	% Un missionario da destra verso sinistra.
	MISSIONARI_DESTRA_2 is MISSIONARI_DESTRA-1,
	MISSIONARI_SINISTRA_2 is MISSIONARI_SINISTRA+1,
	legal(CANNIBALI_SINISTRA,MISSIONARI_SINISTRA_2,CANNIBALI_DESTRA,MISSIONARI_DESTRA_2).

move([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,destra,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,sinistra,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA]):-
	% Un cannibale da destra verso sinistra.
	CANNIBALI_DESTRA_2 is CANNIBALI_DESTRA-1,
	CANNIBALI_SINISTRA_2 is CANNIBALI_SINISTRA+1,
	legal(CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA).


% Ricorsione per risolvere problema
path([CANNIBALI_SINISTRA_1,MISSIONARI_SINISTRA_1,B1,CANNIBALI_DESTRA_1,MISSIONARI_DESTRA_1],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,B2,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2],Explored,MovesList) :- 
   move([CANNIBALI_SINISTRA_1,MISSIONARI_SINISTRA_1,B1,CANNIBALI_DESTRA_1,MISSIONARI_DESTRA_1],[CANNIBALI_SINISTRA_3,MISSIONARI_SINISTRA_3,B3,CANNIBALI_DESTRA_3,MISSIONARI_DESTRA_3]), 
   not(member([CANNIBALI_SINISTRA_3,MISSIONARI_SINISTRA_3,B3,CANNIBALI_DESTRA_3,MISSIONARI_DESTRA_3],Explored)),
   path([CANNIBALI_SINISTRA_3,MISSIONARI_SINISTRA_3,B3,CANNIBALI_DESTRA_3,MISSIONARI_DESTRA_3],[CANNIBALI_SINISTRA_2,MISSIONARI_SINISTRA_2,B2,CANNIBALI_DESTRA_2,MISSIONARI_DESTRA_2],[[CANNIBALI_SINISTRA_3,MISSIONARI_SINISTRA_3,B3,CANNIBALI_DESTRA_3,MISSIONARI_DESTRA_3]|Explored],[ [[CANNIBALI_SINISTRA_3,MISSIONARI_SINISTRA_3,B3,CANNIBALI_DESTRA_3,MISSIONARI_DESTRA_3],[CANNIBALI_SINISTRA_1,MISSIONARI_SINISTRA_1,B1,CANNIBALI_DESTRA_1,MISSIONARI_DESTRA_1]] | MovesList ]).

% Soluzione trovata
path([CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,B,CANNIBALI_DESTRA,MISSIONARI_DESTRA],[CANNIBALI_SINISTRA,MISSIONARI_SINISTRA,B,CANNIBALI_DESTRA,MISSIONARI_DESTRA],_,MovesList):- 
	output(MovesList).

% Stampa risultato
output([]) :- nl. 
output([[A,B]|MovesList]) :- 
	output(MovesList), 
   	write(B), write(' -> '), write(A), nl.

% Find per risolvere il problema Missionari e Cannibali
find :- 
   path([3,3,sinistra,0,0],[0,0,destra,3,3],[[3,3,sinistra,0,0]],_).